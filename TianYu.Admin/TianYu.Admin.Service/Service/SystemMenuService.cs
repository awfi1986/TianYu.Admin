// <autogenerated>
//   This file was generated by T4 code generator Template.tt.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>


using System;
using System.Linq;
using TianYu.Admin.Domain;
using TianYu.Admin.Domain.ViewModel.Response;
using TianYu.Admin.Domain.ViewModel.Request;
using TianYu.Admin.Repository.IModelRepository;
using TianYu.Admin.Service.IService;
using TianYu.Core.Common;
using TianYu.Core.Common.BaseEF;
using TianYu.Core.Common.BaseViewModel;
using System.Data.SqlClient;

namespace TianYu.Admin.Service.Service
{
    /// <summary> 
	/// 菜单仓储服务类
	/// </summary> 
    public class SystemMenuService : ISystemMenuService
    {
        private readonly ISystemMenuRepository _systemMenuRepository;
        private readonly ISystemActionButtonRepository _systemActionButtonRepository;
        public SystemMenuService(ISystemMenuRepository systemMenuRepository
            , ISystemActionButtonRepository systemActionButtonRepository)
        {
            this._systemMenuRepository = systemMenuRepository;
            this._systemActionButtonRepository = systemActionButtonRepository;
        }

        public BusinessBaseViewModel<string> Insert(AddSystemMenuRequestModel requestModel)
        {
            var res = new BusinessBaseViewModel<string>() { Status = ResponseStatus.Fail };

            if (requestModel == null)
            {
                res.ErrorMessage = "参数错误";
                return res;
            }
            if (requestModel.MenuName.IsNullOrWhiteSpace())
            {
                res.ErrorMessage = "菜单名称不能为空";
                return res;
            }
            if (requestModel.Level <= 0)
            {
                res.ErrorMessage = "菜单层级不能为空";
                return res;
            }
            var menuCode = 1001;

            var query = _systemMenuRepository.Find(x => x.ParentCode == requestModel.ParentCode);

            if (query.Any())
            {
                var maxCode = query.Max(x => x.MenuCode);

                menuCode = maxCode + 1;
            }
            else
            {
                menuCode = requestModel.ParentCode * 100 + 1;
            }
            //菜单导行
            var pageTitle = "";
            if (!requestModel.MenuUrl.IsNullOrWhiteSpace() && requestModel.Level != 1)
            { 
                var len = requestModel.Level - 2;
                var code = new int[len + 1];
                code[len] = requestModel.ParentCode;

                var num = 1;
                for (var i = 0; i < len; i++)
                {
                    num = num * 100;
                    code[i] = requestModel.ParentCode / num;
                }

                var queryMenuName = _systemMenuRepository.Find(x => code.Contains(x.MenuCode)).OrderBy(x => x.Level).Select(x => x.MenuName).ToList();

                if (queryMenuName.Any())
                {
                    pageTitle = string.Join("-", queryMenuName) + "-" + requestModel.MenuName;
                }
            }

            var model = new SystemMenu()
            {
                MenuCode = menuCode,
                Level = requestModel.Level,
                MenuDesc = requestModel.MenuDesc,
                MenuIcon = requestModel.MenuIcon,
                MenuName = requestModel.MenuName,
                MenuSort = requestModel.MenuSort,
                MenuUrl = requestModel.MenuUrl,
                PageTitle = pageTitle,
                ParentId = requestModel.ParentId,
                ParentCode = requestModel.ParentCode,
                MenuButtonId = requestModel.MenuButtonId,
                Enabled = requestModel.Enabled,
                CreateTime = DateTime.Now,
                ModifyTime = DateTime.Now
            };

            _systemMenuRepository.Insert(model);
            _systemMenuRepository.SaveChanges();

            res.Status = ResponseStatus.Success;
            return res;
        }

        public BusinessBaseViewModel<string> Remove(RemoveSystemMenuRequestModel requestModel)
        {
            var res = new BusinessBaseViewModel<string>() { Status = ResponseStatus.Fail };

            var menuEntity = _systemMenuRepository.FirstOrDefault(x => x.Id == requestModel.Id);

            if (menuEntity == null)
            {
                res.ErrorMessage = "菜单不存在或已删除";
                return res;
            }
            _systemMenuRepository.SqlExecute("delete s_SystemMenu where MenuCode like @MenuCode", new[] { new SqlParameter("MenuCode", $"{menuEntity.MenuCode}%") });
            _systemMenuRepository.SaveChanges();

            res.Status = ResponseStatus.Success;
            return res;
        }

        public BusinessBaseViewModel<string> Update(UpdateSystemMenuRequestModel requestModel)
        {
            var res = new BusinessBaseViewModel<string>() { Status = ResponseStatus.Fail };

            if (requestModel == null)
            {
                res.ErrorMessage = "参数错误";
                return res;
            }
            if (requestModel.Id <= 0)
            {
                res.ErrorMessage = "Id不能为空";
                return res;
            }
            if (requestModel.MenuName.IsNullOrWhiteSpace())
            {
                res.ErrorMessage = "菜单名称不能为空";
                return res;
            }
            if (requestModel.Level <= 0)
            {
                res.ErrorMessage = "菜单层级不能为空";
                return res;
            }
            if (requestModel.MenuSort <= 0)
            {
                res.ErrorMessage = "菜单排序不能为空";
                return res;
            }

            var menuEntity = _systemMenuRepository.FirstOrDefault(x => x.Id == requestModel.Id);

            if (menuEntity == null)
            {
                res.ErrorMessage = "菜单不存在或已删除";
                return res;
            }

            menuEntity.Level = requestModel.Level;
            menuEntity.MenuButtonId = requestModel.MenuButtonId;
            menuEntity.MenuDesc = requestModel.MenuDesc;
            menuEntity.MenuIcon = requestModel.MenuIcon;
            menuEntity.MenuName = requestModel.MenuName;
            menuEntity.MenuSort = requestModel.MenuSort;
            menuEntity.MenuUrl = requestModel.MenuUrl;
            menuEntity.ParentId = requestModel.ParentId;
            menuEntity.ModifyTime = DateTime.Now;

            _systemMenuRepository.Update(menuEntity);
            _systemMenuRepository.SaveChanges();

            res.Status = ResponseStatus.Success;
            return res;
        }

        public BusinessBaseViewModel<string> Enabled(EnabledSystemMenuRequestModel requestModel)
        {
            var res = new BusinessBaseViewModel<string>() { Status = ResponseStatus.Fail };

            var menuEntity = _systemMenuRepository.FirstOrDefault(x => x.Id == requestModel.Id);

            if (menuEntity == null)
            {
                res.ErrorMessage = "菜单不存在或已删除";
                return res;
            }
            menuEntity.Enabled = requestModel.Enabled;

            _systemMenuRepository.Delete(menuEntity);
            _systemMenuRepository.SaveChanges();

            res.Status = ResponseStatus.Success;
            return res;
        }

        public BusinessPagedBaseViewModel<QuerySystemMenuResponseModel> Query(QuerySystemMenuRequestModel requestModel)
        {
            var res = new BusinessPagedBaseViewModel<QuerySystemMenuResponseModel>() { Status = ResponseStatus.Fail };

            var filter = PredicateBuilder.True<SystemMenu>();

            if (!requestModel.KeyWord.IsNullOrWhiteSpace())
            {
                filter = filter.And(x => x.MenuName.Contains(requestModel.KeyWord));
            }

            var order = new IOrderByBuilder<SystemMenu>[]
             {
                new OrderByBuilder<SystemMenu, int>(x=>x.MenuSort, false),
             };

            var query = _systemMenuRepository.Find(filter, order);

            if (query.Any())
            {
                var list = query.MapToList<QuerySystemMenuResponseModel>();

                var buttonList = _systemActionButtonRepository.Find(x => x.Enabled == true).ToList();

                list.ForEach(m =>
                {
                    if (!m.MenuButtonId.IsNullOrWhiteSpace())
                    {
                        var bids = m.MenuButtonId.ToSplitArray(',').ToList();

                        var bName = buttonList.Where(x => bids.Contains(x.Id.ToString())).Select(x => x.ButtonName).ToList();

                        if (!bName.IsNull())
                        {
                            m.MenuButtonName = string.Join(",", bName);
                        }
                    }
                });

                res.BusinessData = list;
            }
            res.Status = ResponseStatus.Success;
            return res;
        }

        public BusinessBaseViewModel<QueryDetailSystemMenuResponseModel> QueryDetail(QueryDetailSystemMenuRequestModel requestModel)
        {
            var res = new BusinessBaseViewModel<QueryDetailSystemMenuResponseModel>() { Status = ResponseStatus.Fail };

            var menuEntity = _systemMenuRepository.FirstOrDefault(x => x.Id == requestModel.Id);

            if (menuEntity == null)
            {
                res.ErrorMessage = "菜单不存在或已删除";
                return res;
            }
            var entity = menuEntity.MapTo<QueryDetailSystemMenuResponseModel>();

            var parentMenu = _systemMenuRepository.FirstOrDefault(x => x.Id == entity.ParentId);
            if (parentMenu != null)
                entity.ParentName = parentMenu.MenuName;

            if (!entity.MenuUrl.IsNullOrWhiteSpace())
            {
                entity.ButtonList = _systemActionButtonRepository.Find(x => x.Enabled == true).MapToList<SystemButton>();

                if (!entity.MenuButtonId.IsNullOrWhiteSpace())
                {
                    var bids = entity.MenuButtonId.ToSplitArray(',').ToList();
                    entity.ButtonList.Where(x => bids.Contains(x.Id.ToString())).ToList().ForEach(m =>
                    {
                        m.Checked = true;
                    });
                }
            }
            res.BusinessData = entity;
            res.Status = ResponseStatus.Success;
            return res;
        }

    }
}



