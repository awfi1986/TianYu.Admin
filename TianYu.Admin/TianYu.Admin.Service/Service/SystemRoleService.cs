// <autogenerated>
//   This file was generated by T4 code generator Template.tt.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

using System;
using System.Collections.Generic;
using System.Linq;
using TianYu.Admin.Domain;
using TianYu.Admin.Domain.ViewModel;
using TianYu.Admin.Domain.ViewModel.Request;
using TianYu.Admin.Domain.ViewModel.Response;
using TianYu.Admin.Repository.IModelRepository;
using TianYu.Admin.Service.IService;
using TianYu.Core.Common;
using TianYu.Core.Common.BaseEF;
using TianYu.Core.Common.BaseViewModel;

namespace TianYu.Admin.Service.Service
{
    /// <summary> 
	/// 角色仓储服务类
	/// </summary> 
    public class SystemRoleService : ISystemRoleService
    {
        private readonly ISystemRoleRepository _systemRoleRepository;
        private readonly ISystemStaffRoleRepository _systemStaffRoleRepository;
        private readonly ISystemRoleRulesRepository _systemRoleRulesRepository;
        private readonly ISystemMenuRepository _systemMenuRepository;
        private readonly ISystemActionButtonRepository _systemActionButtonRepository;
        public SystemRoleService(ISystemRoleRepository systemRoleRepository,
            ISystemStaffRoleRepository systemStaffRoleRepository,
            ISystemRoleRulesRepository systemRoleRulesRepository,
            ISystemMenuRepository systemMenuRepository,
            ISystemActionButtonRepository systemActionButtonRepository)
        {
            this._systemRoleRepository = systemRoleRepository;
            this._systemStaffRoleRepository = systemStaffRoleRepository;
            this._systemRoleRulesRepository = systemRoleRulesRepository;
            this._systemMenuRepository = systemMenuRepository;
            this._systemActionButtonRepository = systemActionButtonRepository;
        }


        /// <summary>
        /// 添加
        /// </summary>
        /// <param name="requestModel"></param>
        /// <returns></returns>
        public BusinessBaseViewModel<string> Insert(AddSystemRoleRequestModel requestModel)
        {
            var res = new BusinessBaseViewModel<string>() { Status = ResponseStatus.Fail };

            if (requestModel == null)
            {
                res.ErrorMessage = "参数错误";
                return res;
            }
            if (requestModel.RoleName.IsNullOrWhiteSpace())
            {
                res.ErrorMessage = "角色名称不能为空";
                return res;
            }

            var entity = _systemRoleRepository.FirstOrDefault(x => x.RoleName == requestModel.RoleName);

            if (entity != null)
            {
                res.ErrorMessage = "角色名称已存在，不能重复添加";
                return res;
            }

            var model = new SystemRole()
            {
                RoleName = requestModel.RoleName,
                RoleCode = requestModel.RoleCode,
                Enabled = requestModel.Enabled,
                RoleDesc = requestModel.RoleDesc,
                Sort = requestModel.Sort,
                CreateTime = DateTime.Now,
                ModifyTime = DateTime.Now
            };

            _systemRoleRepository.Insert(model);
            _systemRoleRepository.SaveChanges();

            res.Status = ResponseStatus.Success;
            return res;
        }
        /// <summary>
        /// 删除
        /// </summary>
        /// <param name="requestModel"></param>
        /// <returns></returns>
        public BusinessBaseViewModel<string> Remove(RemoveSystemRoleRequestModel requestModel)
        {
            var res = new BusinessBaseViewModel<string>() { Status = ResponseStatus.Fail };

            if (requestModel == null)
            {
                res.ErrorMessage = "参数错误";
                return res;
            }
            if (requestModel.Id <= 0)
            {
                res.ErrorMessage = "角色Id不能为空";
                return res;
            }

            var entity = _systemRoleRepository.FirstOrDefault(x => x.Id == requestModel.Id);
            if (entity == null)
            {
                res.ErrorMessage = "角色不存在或已删除";
                return res;
            }
            //_systemRoleRulesRepository.Delete(entity.Id);
            _systemStaffRoleRepository.Delete(entity.Id);
            _systemRoleRepository.Delete(entity);
            _systemRoleRepository.SaveChanges();

            res.Status = ResponseStatus.Success;
            return res;
        }
        /// <summary>
        /// 修改
        /// </summary>
        /// <param name="requestModel"></param>
        /// <returns></returns>
        public BusinessBaseViewModel<string> Update(UpdateSystemRoleRequestModel requestModel)
        {
            var res = new BusinessBaseViewModel<string>() { Status = ResponseStatus.Fail };

            if (requestModel == null)
            {
                res.ErrorMessage = "参数错误";
                return res;
            }
            if (requestModel.RoleName.IsNullOrWhiteSpace())
            {
                res.ErrorMessage = "角色名称不能为空";
                return res;
            }
            if (requestModel.Id <= 0)
            {
                res.ErrorMessage = "角色Id不能为空";
                return res;
            }
            var entity = _systemRoleRepository.FirstOrDefault(x => x.Id != requestModel.Id && x.RoleName == requestModel.RoleName);

            if (entity != null)
            {
                res.ErrorMessage = "角色名称已存在，不能重复添加";
                return res;
            }

            entity = _systemRoleRepository.FirstOrDefault(x => x.Id == requestModel.Id);

            if (entity == null)
            {
                res.ErrorMessage = "角色不存在或已删除";
                return res;
            }

            entity.RoleName = requestModel.RoleName;
            entity.RoleCode = requestModel.RoleCode;
            entity.Enabled = requestModel.Enabled;
            entity.RoleDesc = requestModel.RoleDesc;
            entity.Sort = requestModel.Sort;
            entity.ModifyTime = DateTime.Now;

            _systemRoleRepository.Update(entity);
            _systemRoleRepository.SaveChanges();

            res.Status = ResponseStatus.Success;
            return res;
        }
        /// <summary>
        /// 查询列表
        /// </summary>
        /// <param name="requestModel"></param>
        /// <returns></returns>
        public BusinessPagedBaseViewModel<QuerySystemRoleResponseModel> Query(QuerySystemRoleRequestModel requestModel)
        {
            var res = new BusinessPagedBaseViewModel<QuerySystemRoleResponseModel>() { Status = ResponseStatus.Fail };

            var filter = PredicateBuilder.True<SystemRole>();

            if (!requestModel.KeyWord.IsNullOrWhiteSpace())
            {
                filter = filter.And(x => x.RoleName.Contains(requestModel.KeyWord));
            }

            var order = new IOrderByBuilder<SystemRole>[]
             {
                new OrderByBuilder<SystemRole, int>(x=>x.Sort, false),
             };

            var query = _systemRoleRepository.Find(out int total, requestModel.PageIndex, requestModel.PageSize, filter, order);

            if (query.Any())
            {
                var list = query.MapToList<QuerySystemRoleResponseModel>();

                res.BusinessData = list;
            }
            res.Total = total;
            res.Status = ResponseStatus.Success;
            return res;
        }
        /// <summary>
        /// 查询明细
        /// </summary>
        /// <param name="requestModel"></param>
        /// <returns></returns>
        public BusinessBaseViewModel<QueryDetailSystemRoleResponseModel> QueryDetail(QueryDetailSystemRoleRequestModel requestModel)
        {
            var res = new BusinessBaseViewModel<QueryDetailSystemRoleResponseModel>() { Status = ResponseStatus.Fail };

            var entity = _systemRoleRepository.FirstOrDefault(x => x.Id == requestModel.Id);

            if (!entity.IsNull())
                res.BusinessData = entity.MapTo<QueryDetailSystemRoleResponseModel>();


            res.Status = ResponseStatus.Success;
            return res;
        }



        /// <summary>
        /// 获取角色
        /// </summary> 
        /// <returns></returns>
        public IEnumerable<QuerySystemRoleResponseModel> GetSystemRole()
        {
            var res = new List<QuerySystemRoleResponseModel>();

            res = _systemRoleRepository.Find(x => x.Enabled == true).MapToList<QuerySystemRoleResponseModel>();

            return res;
        }
        /// <summary>
        /// 获取员工菜单权限
        /// </summary>
        /// <param name="staffId"></param>
        /// <returns></returns>
        public IEnumerable<SystemMenuRoleViewModel> FindStaffMenuRole(int staffId)
        {
            var query = (from a in _systemStaffRoleRepository.Find()
                         join b in _systemRoleRepository.Find() on a.RoleId equals b.Id into temp
                         from bb in temp.DefaultIfEmpty()
                         join c in _systemRoleRulesRepository.Find() on bb.Id equals c.RoleId into temp2
                         from cc in temp2.DefaultIfEmpty()
                         join d in _systemMenuRepository.Find() on cc.MenuId equals d.Id into temp3
                         from dd in temp3.DefaultIfEmpty()
                         where a.StaffId == staffId && cc.Id != null && dd.Id != null
                         orderby dd.MenuSort ascending
                         select new SystemMenuRoleViewModel
                         {
                             Id = dd.Id,
                             Level = dd.Level,
                             MenuButtonId = dd.MenuButtonId,
                             MenuIcon = dd.MenuIcon,
                             MenuName = dd.MenuName,
                             MenuSort = dd.MenuSort,
                             MenuUrl = dd.MenuUrl,
                             ParentId = dd.ParentId,
                             PageTitle = dd.PageTitle
                         }).Distinct();

            var list = query.ToList();

            return list;
        }
        /// <summary>
        /// 获取员工角色
        /// </summary>
        /// <param name="staffIds"></param>
        /// <returns></returns>
        public IEnumerable<SystemRoleViewModel> FindStaffRoleNameByStaffId(IEnumerable<int> staffIds)
        {
            var query = (from a in _systemStaffRoleRepository.Find()
                         join b in _systemRoleRepository.Find() on a.RoleId equals b.Id
                         where staffIds.Contains(a.StaffId)
                         select new SystemRoleViewModel()
                         {
                             Id = b.Id,
                             StaffId = a.StaffId,
                             RoleName = b.RoleName
                         }).Distinct();

            return query.ToList();
        }
        /// <summary>
        /// 获取员工按钮权限
        /// </summary>
        /// <param name="staffId"></param>
        /// <returns></returns>
        public IEnumerable<SystemButtonRoleViewModel> FindStaffRoleNameByStaffId(int staffId)
        {
            var query = (from a in _systemStaffRoleRepository.Find()
                         join b in _systemRoleRepository.Find() on a.RoleId equals b.Id
                         join c in _systemRoleRulesRepository.Find() on b.Id equals c.RoleId
                         join d in _systemActionButtonRepository.Find() on c.ButtonId equals d.Id
                         where staffId == a.StaffId
                         select new SystemButtonRoleViewModel()
                         {
                             MenuId = c.MenuId,
                             ButtonCode = d.ButtonCode
                         }).Distinct();

            return query.ToList();
        }
        /// <summary>
        /// 查询角色菜单权限
        /// </summary>
        /// <param name="roleId"></param>
        /// <returns></returns>
        public IEnumerable<SystemMenuButtonRoleViewModel> FindMenuButtonRole(int roleId)
        {
            var menuList = _systemMenuRepository.Find().MapToList<SystemMenuButtonRoleViewModel>();

            if (menuList != null)
            {
                var buttonList = _systemActionButtonRepository.Find(x => x.Enabled == true).ToList();

                var rolePoweItems = _systemRoleRulesRepository.Find(x => x.RoleId == roleId).ToList();

                var sortMenuList = new List<SystemMenuButtonRoleViewModel>();
                MenuSort(menuList, -1, sortMenuList);

                sortMenuList.ForEach(m =>
                {
                    if (!m.MenuButtonId.IsNullOrWhiteSpace())
                    {
                        m.ButtonList = buttonList.Where(x => m.MenuButtonId.Contains(x.Id.ToString())).OrderBy(x => x.Sort).MapToList<SystemButtonViewModel>();

                        m.ButtonList.ForEach(mm =>
                        {
                            mm.IsChecked = !rolePoweItems.Where(x => x.ButtonId == mm.Id && x.MenuId == m.Id).FirstOrDefault().IsNull();
                        });
                    }
                    else
                    {
                        m.IsChecked = !rolePoweItems.Where(x => x.MenuId == m.Id).FirstOrDefault().IsNull();
                    }
                });

                return sortMenuList;
            }

            return null;
        }

        private void MenuSort(IEnumerable<SystemMenuButtonRoleViewModel> model, int parentId, List<SystemMenuButtonRoleViewModel> model2)
        {
            var list = model.Where(x => x.ParentId == parentId).OrderBy(x => x.MenuSort).ToList();

            if (list != null && list.Count > 0)
            { 
                foreach (var m in list)
                { 
                    model2.Add(m);

                    MenuSort(model, m.Id, model2);
                }
            }
        }
    }
}



