// <autogenerated>
//   This file was generated by T4 code generator Template.tt.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>


using System;
using System.Collections.Generic;
using System.Linq;
using TianYu.Admin.Domain;
using TianYu.Admin.Domain.ViewModel.Response;
using TianYu.Admin.Domain.ViewModel.Request;
using TianYu.Admin.Infrastructure.Enum;
using TianYu.Admin.Repository.IModelRepository;
using TianYu.Admin.Service.IService;
using TianYu.Core.Cache;
using TianYu.Core.Common;
using TianYu.Core.Common.BaseEF;
using TianYu.Core.Common.BaseViewModel;
using TianYu.Core.Common.Security;
using System.Data.SqlClient;

namespace TianYu.Admin.Service.Service
{
    /// <summary> 
	/// 系统账号仓储服务类
	/// </summary> 
    public class SystemStaffService : ISystemStaffService
    {
        private ISystemStaffRepository _staffRepostory;
        private ISystemStaffRoleRepository _systemStaffRoleRepository;
        private ISystemSectionRepository _systemSectionRepository;
        public ISystemRoleService _systemRoleService { get; set; }
        public SystemStaffService(ISystemStaffRepository staffRepostory,
                                    ISystemStaffRoleRepository systemStaffRoleRepository,
                                    ISystemSectionRepository systemSectionRepository)
        {
            this._staffRepostory = staffRepostory;
            this._systemStaffRoleRepository = systemStaffRoleRepository;
            this._systemSectionRepository = systemSectionRepository;
        }


        /// <summary>
        /// 登录后台
        /// </summary>
        /// <param name="loginName">用户名</param>
        /// <param name="loginPwd">密码</param>
        /// <returns>登录凭据</returns>
        public BusinessBaseViewModel<string> Login(string loginName, string loginPwd)
        {
            var response = new BusinessBaseViewModel<string>() { Status = ResponseStatus.Fail };
            if (loginName.IsNullOrWhiteSpace() || loginPwd.IsNullOrWhiteSpace())
            {
                response.ErrorMessage = "请输入用户名或密码";
                return response;
            }

            var Staff = _staffRepostory.FirstOrDefault(t => t.LoginName == loginName && t.Status != (int)SystemStaffStatus.Del);
            if (Staff.IsNull())
            {
                response.ErrorMessage = "请输入用户名不存在或密码错误";
                return response;
            }

            if (Staff.Status == (int)SystemStaffStatus.Stop)
            {
                response.ErrorMessage = "该用户已经被禁用";
                return response;
            }

            if (Staff.LoginPwd.Equals((loginPwd + Staff.MaskCode).ToMd5(), StringComparison.InvariantCultureIgnoreCase))
            {
                //更新最近登录时间
                Staff.LastLoginTime = DateTime.Now;
                _staffRepostory.Update(Staff, "LastLoginTime");
                _staffRepostory.SaveChanges();

                //生成一个登录凭据
                var sessionIdString = $"admin:login:{loginName}:{Utils.NewGuid()}";
                var sessionId = DESEncrypt.Encrypt(sessionIdString.ToBase64());

                string sessionKey = TianYuConsts.GetSessionIdCacheKey(sessionId);
                if (CacheHelper.Exists(sessionKey))
                {
                    CacheHelper.Remove(sessionKey);
                }
                //将用户菜单权限缓存到cache
                var menuList = _systemRoleService.FindStaffMenuRole(Staff.Id);

                CacheHelper.Insert(TianYuConsts.GetLoginUserMenuCacheKey(sessionId), menuList, true);

                var buttonList = _systemRoleService.FindStaffRoleNameByStaffId(Staff.Id);

                CacheHelper.Insert(TianYuConsts.GetLoginUserButtonCacheKey(sessionId), buttonList, true);

                var loginUserInfo = new SystemLoginUserInfo
                {
                    Id = Staff.Id,
                    Eamil = Staff.Eamil,
                    LoginName = Staff.LoginName,
                    Mobile = Staff.Mobile,
                    NickName = Staff.NickName,
                    SectionId = Staff.SectionId,
                    Status = Staff.Status,
                    Tel = Staff.Tel
                };
                //存储当前登录用户数据
                CacheHelper.Insert(TianYuConsts.GetLoginUserInfoCacheKey(sessionId), loginUserInfo, DateTime.Now.AddHours(1));

                response.BusinessData = sessionId;
                response.Status = ResponseStatus.Success;
                return response;
            }
            else
            {
                response.ErrorMessage = "请输入用户名不存在或密码错误";
                return response;
            }
        }
        /// <summary>
        /// 退出登录
        /// </summary>
        /// <returns></returns>
        public BusinessBaseViewModel<string> Logout()
        {
            var response = new BusinessBaseViewModel<string>() { Status = ResponseStatus.Fail };

            var token = CookieHelper.GetCookieValue(TianYuConsts.SystemLoginCookieName);
            if (!token.IsNullOrWhiteSpace())
            {
                CookieHelper.RemoveCookie(TianYuConsts.SystemLoginCookieName);
                CacheHelper.Remove(TianYuConsts.GetSessionIdCacheKey(token));
            }
            response.Status = ResponseStatus.Success;
            return response;
        }
        /// <summary>
        /// 添加
        /// </summary>
        /// <param name="requestModel"></param>
        /// <returns></returns>
        public BusinessBaseViewModel<string> Insert(AddSystemStaffRequestModel requestModel)
        {
            var res = new BusinessBaseViewModel<string>() { Status = ResponseStatus.Fail };

            if (requestModel == null)
            {
                res.Status = ResponseStatus.ParameterError;
                return res;
            }
            if (requestModel.LoginName.IsNullOrWhiteSpace())
            {
                res.ErrorMessage = "登录名称不能为空";
                res.Status = ResponseStatus.ParameterError;
                return res;
            }
            //if (requestModel.LoginPwd.IsNullOrWhiteSpace())
            //{
            //    res.ErrorMessage = "登录密码不能为空";
            //    res.Status = ResponseStatus.ParameterError;
            //    return res;
            //}
            if (requestModel.NickName.IsNullOrWhiteSpace())
            {
                res.ErrorMessage = "呢称不能为空";
                res.Status = ResponseStatus.ParameterError;
                return res;
            }
            if (requestModel.RoleId.IsNull())
            {
                res.ErrorMessage = "账号角色不能为空";
                res.Status = ResponseStatus.ParameterError;
                return res;
            }
            var maskCode = Guid.NewGuid().ToString().Replace("-", "");
            var model = new SystemStaff()
            {
                LoginName = requestModel.LoginName,
                Eamil = requestModel.Eamil,
                Mobile = requestModel.Mobile,
                Tel = requestModel.Tel,
                Status = (int)SystemStaffStatus.Using,
                MaskCode = maskCode,
                LoginPwd = DESEncrypt.Md5To32Lens(requestModel.Mobile + maskCode),
                SectionId = requestModel.SectionId,
                NickName = requestModel.NickName,
                ModifyTime = DateTime.Now,
                CreateTime = DateTime.Now
            };

            _staffRepostory.Insert(model);
            _staffRepostory.SaveChanges();

            var roleList = new List<SystemStaffRole>();

            requestModel.RoleId.ForEach(m =>
            {
                roleList.Add(new SystemStaffRole()
                {
                    RoleId = m,
                    StaffId = model.Id
                });
            });
            _systemStaffRoleRepository.Insert(roleList);
            _systemStaffRoleRepository.SaveChanges();

            res.Status = ResponseStatus.Success;
            return res;
        }
        /// <summary>
        /// 修改
        /// </summary>
        /// <param name="requestModel"></param>
        /// <returns></returns>
        public BusinessBaseViewModel<string> Update(UpdateSystemStaffRequestModel requestModel)
        {
            var res = new BusinessBaseViewModel<string>() { Status = ResponseStatus.Fail };

            if (requestModel == null)
            {
                res.Status = ResponseStatus.ParameterError;
                return res;
            }
            if (requestModel.NickName.IsNullOrWhiteSpace())
            {
                res.ErrorMessage = "呢称不能为空";
                res.Status = ResponseStatus.ParameterError;
                return res;
            }
            var entity = _staffRepostory.FirstOrDefault(x => x.Id == requestModel.Id);

            if (entity.IsNull())
            {
                res.ErrorMessage = "当前用户不存在或已被删除";
                return res;
            }

            entity.Eamil = requestModel.Eamil;
            entity.Mobile = requestModel.Mobile;
            entity.Tel = requestModel.Tel;
            entity.SectionId = requestModel.SectionId;
            entity.NickName = requestModel.NickName;
            entity.ModifyTime = DateTime.Now;


            var roleList = new List<SystemStaffRole>();

            requestModel.RoleId.ForEach(m =>
            {
                roleList.Add(new SystemStaffRole()
                {
                    RoleId = m,
                    StaffId = entity.Id
                });
            });

            _staffRepostory.Update(entity);
            _systemStaffRoleRepository.SqlExecute("delete s_SystemStaffRole where StaffId = @StaffId", new[] { new SqlParameter("StaffId", entity.Id) });
            _systemStaffRoleRepository.Insert(roleList);
            _systemStaffRoleRepository.SaveChanges();

            res.Status = ResponseStatus.Success;
            return res;
        }
        /// <summary>
        /// 逻辑删除
        /// </summary>
        /// <param name="requestModel"></param>
        /// <returns></returns>
        public BusinessBaseViewModel<string> Remove(RemoveSystemStaffRequestModel requestModel)
        {
            var res = new BusinessBaseViewModel<string>() { Status = ResponseStatus.Fail };

            var config = _staffRepostory.FirstOrDefault(x => x.Id == requestModel.Id);
            config.Status = (int)SystemStaffStatus.Del;
            _staffRepostory.Update(config);
            _staffRepostory.SaveChanges();
            res.Status = ResponseStatus.Success;
            res.BusinessData = "操作成功!";
            return res;
        }
        /// <summary>
        /// 密码重置
        /// </summary>
        /// <param name="requestModel"></param>
        /// <returns></returns>
        public BusinessBaseViewModel<string> Reset(ResetSystemStaffRequestModel requestModel)
        {
            var res = new BusinessBaseViewModel<string>() { Status = ResponseStatus.Fail };

            if (requestModel.Id <= 0)
            {
                res.ErrorMessage = "Id不能为空";
                res.Status = ResponseStatus.ParameterError;
                return res;
            }
            if (requestModel.OldLoginPwd.IsNullOrWhiteSpace())
            {
                res.ErrorMessage = "旧密码不能为空";
                res.Status = ResponseStatus.ParameterError;
                return res;
            }
            if (requestModel.NewLoginPwd.IsNullOrWhiteSpace())
            {
                res.ErrorMessage = "新密码不能为空";
                res.Status = ResponseStatus.ParameterError;
                return res;
            }

            var entity = _staffRepostory.FirstOrDefault(x => x.Id == requestModel.Id);

            if (entity.IsNull())
            {
                res.ErrorMessage = "当前用户不存在或已被删除";
                return res;
            }
            var old = (requestModel.OldLoginPwd + entity.MaskCode).ToMd5();
            if (entity.LoginPwd.Equals(old, StringComparison.CurrentCultureIgnoreCase))
            {
                res.ErrorMessage = "旧密码不对";
                return res;
            }
            entity.LoginPwd = (requestModel.NewLoginPwd + entity.MaskCode).ToMd5();

            _staffRepostory.Update(entity, "LoginPwd");
            _staffRepostory.SaveChanges();

            res.Status = ResponseStatus.Success;
            res.BusinessData = "密码重置成功!";
            return res;
        }
        /// <summary>
        /// 获取列表
        /// </summary>
        /// <param name="requestModel"></param>
        /// <returns></returns>
        public BusinessPagedBaseViewModel<QuerySystemStaffResponseModel> Query(QuerySystemStaffRequestModel requestModel)
        {
            var res = new BusinessPagedBaseViewModel<QuerySystemStaffResponseModel>() { Status = ResponseStatus.Fail };

            var filter = PredicateBuilder.True<SystemStaff>();

            filter = filter.And(x => x.Status != (int)SystemStaffStatus.Del);

            if (!requestModel.KeyWord.IsNullOrWhiteSpace())
            {
                filter = filter.And(x => x.LoginName.Contains(requestModel.KeyWord) || x.NickName.Contains(requestModel.KeyWord)
                || x.Mobile.Contains(requestModel.KeyWord));
            }

            var order = new IOrderByBuilder<SystemStaff>[]
            {
                new OrderByBuilder<SystemStaff, DateTime? >(x=>x.CreateTime, true),
            };

            var query = _staffRepostory.Find(out int totalCount, requestModel.PageIndex, requestModel.PageSize, filter, order);

            if (query.Any())
            {
                var viewModel = query.MapToList<QuerySystemStaffResponseModel>();

                //获取部门名称
                var sectionIds = viewModel.Select(x => x.SectionId).ToList();
                var sectionList = _systemSectionRepository.Find(x => sectionIds.Contains(x.Id.ToString()));

                if (sectionList.Any())
                {
                    viewModel.ForEach(m =>
                    {
                        var section = sectionList.Where(x => m.SectionId == x.Id + "").Select(x => x.Name).ToList();

                        if (!section.IsNull())
                        {
                            m.SectionName = string.Join(",", section);
                        }

                    });
                }

                //获取角色名称
                var StaffIds = viewModel.Select(x => x.Id);

                var roleList = _systemRoleService.FindStaffRoleNameByStaffId(StaffIds);

                if (roleList.Any())
                {
                    viewModel.ForEach(m =>
                    {
                        var role = roleList.Where(x => m.Id == x.StaffId).Select(x => x.RoleName).ToList();

                        if (!role.IsNull())
                        {
                            m.RoleName = string.Join(",", role);
                        }

                    });
                }

                res.BusinessData = viewModel;
            }

            res.Total = totalCount;
            res.Status = ResponseStatus.Success;

            return res;
        }
        /// <summary>
        /// 详情查询
        /// </summary>
        /// <param name="requestModel"></param>
        /// <returns></returns>
        public BusinessBaseViewModel<QueryDetailSystemStaffResponseModel> QueryDetail(QueryDetailSystemStaffRequestModel requestModel)
        {
            var res = new BusinessBaseViewModel<QueryDetailSystemStaffResponseModel>() { Status = ResponseStatus.Fail };

            if (requestModel.Id <= 0)
            {
                res.ErrorMessage = "Id不能为空";
                res.Status = ResponseStatus.ParameterError;
                return res;
            }

            var query = _staffRepostory.Find(x => x.Id == requestModel.Id);

            if (query.Any())
            {
                var entity = query.FirstOrDefault();
                res.BusinessData = entity.MapTo<QueryDetailSystemStaffResponseModel>();
            }

            res.Status = ResponseStatus.Success;
            return res;
        }
        /// <summary>
        /// 修改密码
        /// </summary>
        /// <param name="requestModel"></param>
        /// <param name="id"></param>
        /// <returns></returns>
        public BusinessBaseViewModel<string> UpdatePwd(UpdatePwdSystemStaffRequestModel requestModel, int id)
        {
            var res = new BusinessBaseViewModel<string>() { Status = ResponseStatus.Fail };

            if (requestModel == null)
            {
                res.ErrorMessage = "参数错误";
                return res;
            }
            if (requestModel.OldLoginPwd.IsNullOrWhiteSpace())
            {
                res.ErrorMessage = "旧密码不能为空";
                return res;
            }
            if (requestModel.NewLoginPwd.IsNullOrWhiteSpace())
            {
                res.ErrorMessage = "新密码不能为空";
                return res;
            }
            var staffEntity = _staffRepostory.FirstOrDefault(x => x.Id == id);

            if (staffEntity != null)
            {
                if (staffEntity.LoginPwd.Equals((requestModel.OldLoginPwd + staffEntity.MaskCode).ToMd5(), StringComparison.InvariantCultureIgnoreCase))
                {
                    staffEntity.LoginPwd = (requestModel.NewLoginPwd + staffEntity.MaskCode).ToMd5();

                    _staffRepostory.Update(staffEntity, "LoginPwd");
                    _staffRepostory.SaveChanges();
                    res.Status = ResponseStatus.Success;
                }
                else
                {
                    res.ErrorMessage = "旧密码错误";
                    return res;
                }
            } 

            return res;
        }
    }
}



